{"version":3,"sources":["InfoBox.js","utils.js","LineGraph.js","Map.js","Tables.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","type","isOrange","isGreen","isRed","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","getColor","caseType","backGroundeColors","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","data1","chartData","buildChartData","data2","lastDataPoint","Object","keys","forEach","date","newDataPoint","x","y","push","length","datasets","backgroundColor","fill","borderColor","Map","countries","zoom","TileLayer","url","attribution","Tables","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","setCenter","mapZoom","setmapZoom","mapCountries","setMapCountries","setCasesType","worldwideCases","setWorldWideCases","getCountriesData","countries1","name","iso3","onCountryChange","target","event","countryCode","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94259770.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\nimport React from 'react'\nimport './InfoBox.css';\n\nconst InfoBox = ({title, cases, total, type, isOrange, isGreen, isRed, active, ...props}) => {\n    return (\n            <Card onClick = {props.onClick} className = {`infoBox ${active && \"infoBox--selected\"} ${isOrange && 'infoBox--orange'} ${isGreen && 'infoBox--green'} ${isRed && 'infoBox--red'}`}>\n                \n                <CardContent>\n                    {/* Title */}\n                    <Typography className = \"infoBox__title\" color = \"textSecondary\">\n                        {title}\n                    </Typography>\n\n                    <h3 className = {`infoBox__cases ${isGreen && 'infoBox__cases--green'} ${isOrange && 'infoBox__cases--orange'}`}>{cases}</h3>\n\n                    <Typography className = \"infoBox__total\" color = \"textSecondary\">\n                       Total {type}:{total}\n                    </Typography>\n\n                    {/* +120k Number of Cases */}\n\n                    {/* 1.2M Total */}\n                </CardContent>\n            </Card>\n    )\n}\n\nexport default InfoBox\n","import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#437dfb\",\n      multiplier: 800,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      multiplier: 800,\n    },\n    deaths: {\n      hex: \"#CC1034\",\n      multiplier: 1200,\n    },\n  };\n\n\nexport const sortData = (data) =>{\n    const sortedData = [...data];\n\n    sortedData.sort( (a, b) => (a.cases > b.cases ? -1 : 1));\n    return(sortedData) \n};\n\n\nexport const prettyPrintStat = (stat) =>\nstat?`+${numeral(stat).format(\"0.0a\")}`: \"+0\";\n\n\n//Draw circles on map with interactive tooltop\nexport const showDataOnMap = (data, casesType ='cases') =>\n    \n    data.map(country =>{\n        return(\n        <Circle\n        center = {[country.countryInfo.lat, country.countryInfo.long]}\n        fillOpacity = {0.4}\n        color = {casesTypeColors[casesType].hex}\n        fillColor = {casesTypeColors[casesType].hex}\n        radius ={\n            Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier \n        }\n        >\n\n            <Popup>\n                <div className = \"info-container\">\n                    <div className = \"info-flag\"\n                    style = {{backgroundImage: `url(${country.countryInfo.flag})`}}\n                    ></div>\n                    <div className = \"info-name\">{country.country}</div>\n                    <div className = \"info-confirmed\">\n                        Cases:{numeral(country.cases).format(\"0,0\")}\n                        </div>\n                    <div className = \"info-recovered\">\n                        Recovered:{numeral(country.recovered).format(\"0,0\")}\n                        </div>\n                    <div className = \"info-deaths\">\n                        Deaths:{numeral(country.deaths).format(\"0,0\")}\n                        </div>\n                </div>\n            </Popup>\n\n        </Circle>\n        )\n    })\n\n\n\nexport const getColor = (caseType) =>(\n    casesTypeColors[caseType][\"hex\"]\n)\n\n\nconst backGroundeColors = {\n    cases: {\n      hex: \"#437dfba2\",\n    },\n    recovered: {\n      hex: \"#7dd71d73\",\n    },\n    deaths: {\n      hex: \"#cc1032b7\",\n    },\n  };\n\nexport const getBackgroundColor = (caseType) =>(\n    backGroundeColors[caseType][\"hex\"]\n)\n","import React, { useEffect, useState } from 'react'\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral';\nimport { getBackgroundColor, getColor } from './utils';\n\n\nconst options = {\n    legend:{\n        display:false,\n    },\n    elements:{\n        point:{\n            radius:0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips:{\n        mode:\"index\",\n        intersect:false,\n        callbacks:{\n            label: function(tooltipItem, data){\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales:{\n        xAxes:[\n            {\n                type: \"time\",\n                time:{\n                    format:\"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes:[\n            {\n                gridLines:{\n                    display:false,\n                },\n                ticks:{\n                    callback:function(value, index, values){\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ], \n    },\n}\n\nfunction LineGraph ({casesType = 'recovered', ...props}) {\n\n    const [data, setData] = useState({});\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=120\n\n    useEffect(() =>{\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n            .then(response => response.json())\n            .then(data1 =>{\n            const chartData = buildChartData(data1, casesType);\n            setData(chartData);\n        })\n        }\n        fetchData();\n    },[casesType])\n\n    const buildChartData = (data2, casesType) => {\n        const chartData = [];\n        let lastDataPoint;\n        Object.keys(data2[casesType]).forEach((date) =>{\n            if(lastDataPoint && data2[casesType][date] !== 0){\n                const newDataPoint = {\n                    x:date,\n                    y: data2[casesType][date] - lastDataPoint\n                }\n                chartData.push(newDataPoint);\n            }\n            lastDataPoint = data2[casesType][date];\n        })\n        return chartData;\n    }\n\n    return (\n        \n        <div className = {props.className}>\n            {data?.length > 0 &&(\n                <Line \n                options={options}\n                data = {{\n                    datasets:[\n                        {   \n                            backgroundColor:`${getBackgroundColor(casesType)}`,\n                            fill: true,\n                            borderColor:`${getColor(casesType)}`,\n                            data:data\n                        }\n                    ]\n                }}\n            />\n            )}\n            \n\n        </div>\n    )\n}\n\nexport default LineGraph\n","import React from 'react'\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\nimport './Map.css';\nimport { showDataOnMap } from './utils';\n\nfunction Map({countries, casesType, center, zoom}){\n    return (\n        <div className = \"map\">\n            <LeafletMap center ={center} zoom = {zoom}>\n                 <TileLayer\n                    url =\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    />\n                {showDataOnMap(countries,casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import numeral from 'numeral';\nimport React from 'react';\nimport './tables.css';\n\nconst Tables = ({countries}) => {\n    \n    return (\n        <div className =\"tables\">\n            {countries.map(({country, cases})=>(\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\n                    </td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Tables\n","import { Card, CardContent, FormControl, List, MenuItem, Select } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport LineGraph from './LineGraph';\nimport Map from './Map';\nimport Tables from './Tables';\nimport {prettyPrintStat, sortData} from './utils';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([])\n  const [center, setCenter] = useState({lat: 10.8505, lng: 76.2711})\n  const [mapZoom, setmapZoom] = useState(2)\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState('cases');\n  const [worldwideCases, setWorldWideCases] = useState([])\n\n  useEffect(() =>{\n    const getCountriesData = async () =>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then(response => response.json())\n      .then((data)=>{\n        // mapping only the neccessary details for each country.\n        const countries1 = data.map((country)=>(\n          {\n            name:country.country, //United Kingdom\n            value: country.countryInfo.iso3 // UK\n          }\n        ));\n        const sortedData = sortData(data)\n        //setting all countries list into usestate\n        setTableData(sortedData);\n        setMapCountries(data);\n        setWorldWideCases(data);\n        setCountries(countries1);\n      })\n      // getting worldwide data on first loading\n      onCountryChange({target:{value:'worldwide'}})\n    }\n    getCountriesData();\n    \n\n  },[])\n\n  const  onCountryChange = async(event) =>{\n    // getting worldwide or specific country's covid-19 satus\n    const countryCode = event.target.value;\n    const url = countryCode==='worldwide' ? 'https://disease.sh/v3/covid-19/all' \n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    // https://disease.sh/v3​/covid-19​/all\n    // https://disease.sh/v3/covid-19/countries/{country}\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data =>{\n      setCountryInfo(data);\n      setCountry(countryCode);\n      if (countryCode !== 'worldwide'){\n      setCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setmapZoom(3)\n      setMapCountries([data]);\n      }else{\n        setmapZoom(1);\n        setMapCountries(worldwideCases);\n      }\n      \n    });\n\n  };\n\n   \n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className = \"app__dropdown\">\n            <Select \n            variant = \"outlined\"\n            onChange = {onCountryChange}\n            value = {country}\n            >\n              <MenuItem value = {'worldwide'}>WorldWide</MenuItem>\n              {\n                countries.map((country, index) =>(\n                  <MenuItem key = {index} value = {country.value}>{country.name}</MenuItem>\n                ))\n              }\n\n            </Select>\n          </FormControl>\n        </div>\n\n      {/* {Header} */}\n      {/* Title + Select input dropdown field */}\n      \n      <div className=\"app__stats\">\n\n        <InfoBox\n        isOrange \n        active ={casesType===\"cases\"} \n        onClick ={(e)=>setCasesType('cases')} \n        title=\"Corona Cases\" \n        cases = {prettyPrintStat(countryInfo.todayCases)} \n        total = {prettyPrintStat(countryInfo.cases)} \n        type = \"Cases\"\n        />\n\n        <InfoBox\n        isGreen\n        active ={casesType===\"recovered\"} \n        onClick ={(e)=>setCasesType('recovered')} \n        title=\"Recovered\" \n        cases = {prettyPrintStat(countryInfo.todayRecovered)} \n        total = {prettyPrintStat(countryInfo.recovered)} \n        type =\"Recovery\"\n        />\n\n        <InfoBox\n        isRed \n        active ={casesType===\"deaths\"} \n        onClick ={(e)=>setCasesType('deaths')} \n        title=\"Deaths\" \n        cases = {prettyPrintStat(countryInfo.todayDeaths)} \n        total = {prettyPrintStat(countryInfo.deaths)} \n        type = \"Deaths\"\n        />\n\n      </div>\n      \n      \n\n      {/* Map */}\n      <Map\n      countries = {mapCountries} \n      center = {center}\n      zoom = {mapZoom}\n      casesType= {casesType}\n      />\n\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Tables countries = {tableData} />\n          <h3 className = \"app_graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className = {\"app__graph\"} casesType= {casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}